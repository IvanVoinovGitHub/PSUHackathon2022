# -*- coding: utf-8 -*-
"""HackingCovid.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Y4fTnTs0iUkIBpBOsTnQv9lek1Eyhcz2
"""

#Humanitarian Aid + Covid Risk Assessment

# 1. Categorize all Countries that need humanitarian aid
# 2. Store all these countries with their respective variables
# 3. Find the data about Covid Risk in Countries - this might also include vaccination rates etc.
# 4. Combine the the Covid Risk of a Country + How much aid is needed to calculate a priority queue of where aid needs to go

import pandas as pd
import matplotlib.pyplot as plt

humanitarian_data = "https://raw.githubusercontent.com/IvanVoinovGitHub/PSUHackathon2022/main/data-cRsVz.csv"
humanitarian_dataframe = pd.read_csv(humanitarian_data)

df = pd.DataFrame(humanitarian_dataframe,columns=['2017','2018','2019', '2020', '2021', '2022', 'Appeal'])
df.plot(x='Appeal', y=['2017','2018','2019','2020','2021','2022'], kind="bar")
#df.plot(x ='Unemployment_Rate', y='Stock_Index_Price', kind = 'scatter')
plt.show()

print(humanitarian_dataframe)

print(humanitarian_dataframe.head())

covid_data = "https://raw.githubusercontent.com/IvanVoinovGitHub/PSUHackathon2022/main/data.csv"
covid_df = pd.read_csv(covid_data)
# Risk Level: [1, 2, 3, 4]
# 1: <1 
# 2: 1-9
# 3: 10-24
# 4: 25+
# Source: https://globalepidemics.org/key-metrics-for-covid-suppression/

print(covid_df)

counter = 0 

#Country: [Cases per 100,000, Risk Level]
countriesCurrentCases = {}
mostRecentDate = '2022-13'

for dates in covid_df['year_week']:
  if mostRecentDate == dates: 
    if covid_df['indicator'][counter] == 'cases' and pd.notnull(covid_df['country_code'][counter]):

      countriesCurrentCases[covid_df['country'][counter]] = [covid_df['rate_14_day'][counter]]

      if covid_df['rate_14_day'][counter] >= 25:
        countriesCurrentCases[covid_df['country'][counter]].append(4)
      elif covid_df['rate_14_day'][counter] >= 10:
        countriesCurrentCases[covid_df['country'][counter]].append(3)
      elif covid_df['rate_14_day'][counter] >= 1:
        countriesCurrentCases[covid_df['country'][counter]].append(2)
      else:
        countriesCurrentCases[covid_df['country'][counter]].append(1)
  counter+=1

print(countriesCurrentCases)

print(humanitarian_dataframe['Appeal'])

countryList = humanitarian_dataframe['Appeal']

temp = []
temp2=[]
temp3 = []
for x in countryList:
  temp3.append(x.lstrip())
for country in countriesCurrentCases:
  if country not in temp3:
    for data in countriesCurrentCases[country]:
      temp.append(data)
    temp2.append(temp.pop())

print(temp)
print(temp2)
len(temp2)

One1=0
Two1=0
Three1=0
Four1=0
for items in temp2:
  if(items==1):
    One1+=1
  elif(items==2):
    Two1+=1
  elif(items==3):
    Three1+=1
  else:
    Four1+=1

riskdis1 = []
riskdis1.append(One1/len(temp2))
riskdis1.append(Two1/len(temp2))
riskdis1.append(Three1/len(temp2))
riskdis1.append(Four1/len(temp2))

risklevel = [1,2,3,4]
print(riskdis1)
df = pd.DataFrame()
df['riskdis'] = riskdis1
df['risklevel'] = risklevel

df = pd.DataFrame(df,columns=['riskdis', 'risklevel'])
df.plot(x='risklevel', y='riskdis', kind="bar")
plt.title('Risk Distribution among Crisis Countries')
plt.ylabel('% of Countries')
plt.xlabel('Risk Level')
plt.show()

countryList = []
casesList = []
riskLVL = []
dictionary = {}
counter=0
for country in countriesCurrentCases:
  countryList.append(country)
  for data in countriesCurrentCases[country]:
    casesList.append(data)
  riskLVL.append(casesList.pop())

dictionary['Country']=countryList
dictionary['Cases']=casesList
dictionary['Level of Risk']=riskLVL

covidRisk = pd.DataFrame(dictionary)

covidRisk = covidRisk.sort_values(by='Cases', ascending=False)

humanitarian_dataframe = humanitarian_dataframe.rename(columns = {'Appeal': 'Country'})

for country in humanitarian_dataframe['Country']:
    Splitter = country.split(':')

    if(len(Splitter)==3):
      humanitarian_dataframe=humanitarian_dataframe.replace(country,Splitter[2].rstrip(), regex = True) 
humanitarian_dataframe=humanitarian_dataframe.drop([30,31,32,33,34,35,36])

print(covidRisk)

newFrame = humanitarian_dataframe.join(covidRisk, lsuffix=('Country'))

counter=0
calcValue = []
for risks in newFrame['Level of Risk']:
  calcValue.append(risks*newFrame['People in need'][counter])
  counter+=1

newFrame['Caculated Risk']=calcValue

newFrame=newFrame.drop(columns=['Country'])
newFrame=newFrame.rename(columns = {'CountryCountry': 'Country'})
newFrame

newFrame = newFrame.sort_values(by=['Caculated Risk'], ascending = False)
newFrame

#Correlation of 4's to need for Humanitarian aid
One=0
Two=0
Three=0
Four=0
for items in riskLVL:
  if(items==1):
    One+=1
  elif(items==2):
    Two+=1
  elif(items==3):
    Three+=1
  else:
    Four+=1
print(Four/len(riskLVL)*100,'% of the countries that most need humanitarian aids are at a Level 4 risk for COVID')
print(Three/len(riskLVL)*100,'% of the countries that most need humanitarian aids are at a Level 3 risk for COVID')
print(Two/len(riskLVL)*100,'% of the countries that most need humanitarian aids are at a Level 2 risk for COVID')
print(One/len(riskLVL)*100,'% of the countries that most need humanitarian aids are at a Level 1 risk for COVID')

riskdis = []
riskdis.append(One/len(riskLVL))
riskdis.append(Two/len(riskLVL))
riskdis.append(Three/len(riskLVL))
riskdis.append(Four/len(riskLVL))

risklevel = [1,2,3,4]
print(riskdis)
df = pd.DataFrame()
df['riskdis'] = riskdis
df['risklevel'] = risklevel

df = pd.DataFrame(df,columns=['riskdis', 'risklevel'])
df.plot(x='risklevel', y='riskdis', kind="bar")
plt.title('Risk Distribution among Crisis Countries')
plt.ylabel('% of Countries')
plt.xlabel('Risk Level')
plt.show()

df = pd.DataFrame(newFrame,columns=['Country', 'Caculated Risk'])
df.plot(x='Country', y='Caculated Risk', kind="bar")
plt.title('Humanitarian Crisis Risk Evaluation')
plt.ylabel('Risk Score')
plt.show()

import plotly.express as px

df = px.data.gapminder().query("year==2007")
fig = px.choropleth(df, locations="iso_alpha",
                    color="lifeExp", # lifeExp is a column of gapminder
                    hover_name="country", # column to add to hover information
                    color_continuous_scale=px.colors.sequential.Plasma)
fig.show()

sumOfCalcRisk = 0
calcRiskList = []
percentOfRisk = []
for riskValue in newFrame['Caculated Risk']:
  sumOfCalcRisk+=riskValue
  calcRiskList.append(riskValue)

for values in calcRiskList:
  percentOfRisk.append(round(((values/sumOfCalcRisk)*100),2))

newFrame['Percentage of Aid Needed']=percentOfRisk

newFrame